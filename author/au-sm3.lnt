/* Date Stamp */ -d"_lint_au_sm3_lnt=au-sm3.lnt modified 18-Aug-2005"
/* To document usage use: -message( "Using " _lint_au_sm3_lnt ) */
// ---------------------------------------------------------------------
// This file is provided by Gimpel Software (www.gimpel.com) for use with
// its products PC-lint and FlexeLint.
//
// Redistribution and use of this file, with or without modification, is
// permitted provided that any such redistribution retains this notice.
// ---------------------------------------------------------------------
// au-sm3.lnt -- Author options - Scott Meyers

/*
    This options file can be used to explicitly activate those
    checks advocated in the publication:

    [30] Meyers, Scott, Effective C++ Third Edition, Addison-Wesley, 2005

    See also au-sm123.lnt, which contains an author file covering this
    reference and two of Scott Meyers earlier works.

    You can use this file directly when linting your programs as in:

    lin  au-sm3  files

    Most of the Scott Meyers checks are on by default.  The
    Elective Notes (19??), however, are not and so this file
    is necessary to get the full impact of the Scott Meyers
    multi-volume set of recommendations.

    Also, this file explicitly activates those Warnings and
    Informationals advocated by Scott Meyers just in case they were
    suppressed previously.  For example,

    lin -w2 au-sm3  files

    has the effect of removing all Informational messages
    other than those reactivated in this file.

    If you do not want code to adhere to all of the Scott Meyers'
    checks we recommend that, rather than editing this file, you
    include it within a file of your own.  For example: let
    my-sm.lnt contain

    au-sm3.lnt
    -e1925   // allow public data members

    In this way you inherit the checks specified in this file
    except for the ones that you wish to specifically exclude.

    Then you can use my-sm.lnt in place of au-sm3.lnt

    You might consider placing this file (au-sm3.lnt) or your own
    derivation of it (as shown above) in your global options
    file.

 */

+e424   //  Inappropriate deallocation (Name1) for 'Name2' data. -- [30, Item 16]
-append( 424, --- Eff. C++ 3rd Ed. item 16 )
+e530   //  Symbol not initialized -- [30, Item 4]
-append( 530, --- Eff. C++ 3rd Ed. item 4 )
+e603   //  Symbol not initialized -- [30, Item 4]
-append( 603, --- Eff. C++ 3rd Ed. item 4 )
+e644   //  Variable may not have been initialized -- [30, Item 4]
-append( 644, --- Eff. C++ 3rd Ed. item 4 )
+e645   //  Symbol may not have been initialized -- [30, Item 4]
-append( 645, --- Eff. C++ 3rd Ed. item 4 )
+e673   //  Possibly inappropriate deallocation (Name1) for 'Name2' data. -- [30, Item 16]
-append( 673, --- Eff. C++ 3rd Ed. item 16 )
+e727   //  Symbol not explicitly initialized -- [30, Item 4]
-append( 727, --- Eff. C++ 3rd Ed. item 4 )
+e728   //  Symbol not explicitly initialized -- [30, Item 4]
-append( 728, --- Eff. C++ 3rd Ed. item 4 )
+e729   //  Symbol not explicitly initialized -- [30, Item 4]
-append( 729, --- Eff. C++ 3rd Ed. item 4 )
+e738   //  Symbol not explicitly initialized -- [30, Item 4]
-append( 738, --- Eff. C++ 3rd Ed. item 4 )
+e771   //  Symbol conceivably not initialized -- [30, Item 4]
-append( 771, --- Eff. C++ 3rd Ed. item 4 )
+e772   //  Symbol conceivably not initialized -- [30, Item 4]
-append( 772, --- Eff. C++ 3rd Ed. item 4 )
+e818   //  Pointer parameter could be declared ptr to const -- [30, Item 3]
-append( 818, --- Eff. C++ 3rd Ed. item 3 )
+e952   //  Parameter could be declared const -- [30, Item 3]
-append( 952, --- Eff. C++ 3rd Ed. item 3 )
+e953   //  Variable could be declared as const -- [30, Item 3]
-append( 953, --- Eff. C++ 3rd Ed. item 3 )
+e954   //  Pointer variable could be declared as pointing to a const -- [30, Item 3]
-append( 954, --- Eff. C++ 3rd Ed. item 3 )
+e1072  //  Reference variable must be initialized -- [30, Item 4]
-append( 1072, --- Eff. C++ 3rd Ed. item 4 )
+e1401  //  member symbol not initialized by constructor -- [30, Item 4], [30, Item 13]
-append( 1401, --- Eff. C++ 3rd Ed. item 4 & Eff. C++ 3rd Ed. item 13)
+e1402  //  member not initialized -- [30, Item 4]
-append( 1402, --- Eff. C++ 3rd Ed. item 4 )
+e1403  //  member not initialized -- [30, Item 4]
-append( 1403, --- Eff. C++ 3rd Ed. item 4 )
+e1411  //  Member with different signature hides virtual member -- [30, Item 33]
-append( 1411, --- Eff. C++ 3rd Ed. item 33 )
+e1412  //  Reference member is not initialized -- [30, Item 4]
-append( 1412, --- Eff. C++ 3rd Ed. item 4 )
+e1413  //  function is returning a temporary via a reference -- [30, Item 21]
-append( 1413, --- Eff. C++ 3rd Ed. item 21 )
+e1506  //  Call to virtual function within a constructor or destructor -- [30, Item 9]
-append( 1506, --- Eff. C++ 3rd Ed. item 9 )
+e1509  //  base class destructor for class 'Name' is not virtual -- [30, Item 7]
-append( 1509, --- Eff. C++ 3rd Ed. item 7 )
+e1511  //  Member hides non-virtual member -- [30, Item 33], [30, Item 36]
-append( 1511, --- Eff. C++ 3rd Ed. item 33 & Eff. C++ 3rd Ed. item 36)
+e1516  //  Data member hides inherited member -- [30, Item 33]
-append( 1516, --- Eff. C++ 3rd Ed. item 33 )
+e1529  //  Symbol not first checking for assignment to this -- [30, Item 11]
-append( 1529, --- Eff. C++ 3rd Ed. item 11 )
+e1531  //  Symbol should have compared argument against sizeof(class) -- [30, Item 51]
-append( 1531, --- Eff. C++ 3rd Ed. item 51 )
+e1534  //  static variable found within inline function in header -- [30, Item 30]
-append( 1534, --- Eff. C++ 3rd Ed. item 30 )
+e1537  //  const function returns pointer data member -- [30, Item 28]
-append( 1537, --- Eff. C++ 3rd Ed. item 28 )
+e1539  //  member not assigned by assignment operator -- [30, Item 12]
-append( 1539, --- Eff. C++ 3rd Ed. item 12 )
+e1541  //  member possibly not initialized by constructor -- [30, Item 4], [30, Item 13]
-append( 1541, --- Eff. C++ 3rd Ed. item 4 & Eff. C++ 3rd Ed. item 13)
+e1542  //  member possibly not initialized -- [30, Item 4]
-append( 1542, --- Eff. C++ 3rd Ed. item 4 )
+e1543  //  member possibly not initialized -- [30, Item 4]
-append( 1543, --- Eff. C++ 3rd Ed. item 4 )
+e1546  //  throw^(parens) called within destructor -- [30, Item 8]
-append( 1546, --- Eff. C++ 3rd Ed. item 8 )
+e1551  //  function may throw an exception in destructor -- [30, Item 8]
-append( 1551, --- Eff. C++ 3rd Ed. item 8 )
+e1557  //  const member is not initialized -- [30, Item 4]
-append( 1557, --- Eff. C++ 3rd Ed. item 4 )
+e1559  //  Uncaught exception 'Name' may be thrown in destructor -- [30, Item 8]
-append( 1559, --- Eff. C++ 3rd Ed. item 8 )
+e1722  //  assignment operator for class does not return a reference to class -- [30, Item 10]
-append( 1722, --- Eff. C++ 3rd Ed. item 10 )
+e1724  //  Argument to copy constructor for class should be a const reference -- [30, Item 3], [30, Item 20]
-append( 1724, --- Eff. C++ 3rd Ed. item 3 & Eff. C++ 3rd Ed. item 20)
+e1727  //  inline not previously defined inline at -- [30, Item 30]
-append( 1727, --- Eff. C++ 3rd Ed. item 30 )
+e1739  //  Binary operator should be non-member function -- [30, Item 24]
-append( 1739, --- Eff. C++ 3rd Ed. item 24 )
+e1741  //  member conceivably not initialized by constructor -- [30, Item 4], [30, Item 13]
-append( 1741, --- Eff. C++ 3rd Ed. item 4 & Eff. C++ 3rd Ed. item 13)
+e1742  //  member conceivably not initialized -- [30, Item 4]
-append( 1742, --- Eff. C++ 3rd Ed. item 4 )
+e1743  //  member conceivably not initialized -- [30, Item 4]
-append( 1743, --- Eff. C++ 3rd Ed. item 4 )
+e1744  //  member possibly not initialized by private constructor -- [30, Item 4]
-append( 1744, --- Eff. C++ 3rd Ed. item 4 )
+e1745  //  member not assigned by private assignment operator -- [30, Item 12]
-append( 1745, --- Eff. C++ 3rd Ed. item 12 )
+e1746  //  parameter of function could be made const reference -- [30, Item 3], [30, Item 20]
-append( 1746, --- Eff. C++ 3rd Ed. item 3 & Eff. C++ 3rd Ed. item 20)
+e1762  //  Member function could be made const -- [30, Item 3]
-append( 1762, --- Eff. C++ 3rd Ed. item 3 )
+e1764  //  Reference parameter could be declared const reference -- [30, Item 3]
-append( 1764, --- Eff. C++ 3rd Ed. item 3 )
+e1770  //  function defined without function 'String' -- [30, Item 52]
-append( 1770, --- Eff. C++ 3rd Ed. item 52 )
+e1772  //  Assignment operator is not returning *this -- [30, Item 10]
-append( 1772, --- Eff. C++ 3rd Ed. item 10 )
+e1921  //  Symbol not checking argument against sizeof(class) -- [30, Item 51]
-append( 1921, --- Eff. C++ 3rd Ed. item 51 )
+e1923  //  macro could become const variable -- [30, Item 2]
-append( 1923, --- Eff. C++ 3rd Ed. item 2 )
+e1925  //  Symbol is a public data member -- [30, Item 22]
-append( 1925, --- Eff. C++ 3rd Ed. item 22 )
+e1929  //  function returning a reference -- [30, Item 21]
-append( 1929, --- Eff. C++ 3rd Ed. item 21 )
+e1961  //  virtual member function could be made const -- [30, Item 3]
-append( 1961, --- Eff. C++ 3rd Ed. item 3 )
